#### Outline

- Configuration File
- Entry
- Output
- Loaders
- Plugins

- Assets Management
- Output Management
- Code Splitting and Lazy Loading
- Hot Module Replacement(HRM)
- Tree Shaking
- Optimization: Minification, Caching
- Error Handling
- Transpilation and Polyfilling - Babel and Core-js

<!-- We also need `babel-loader`  which is used to transpile modern JavaScript (ES6+ and beyond) into a version of JavaScript that is compatible with older browsers. -->

<!-- babel-loader @babel/core @babel/preset-env -->

<!-- ### What is Bundling?

Before we dive into the world of **Webpack**, let’s first tackle what **bundling** actually is and why it’s so important in modern web development.

**Bundling** combines multiple JavaScript files (or modules) into one file (or a few smaller files). Instead of the browser making dozens or even hundreds of requests for your JavaScript, CSS, images, and fonts, it just grabs a few **bundles** that contain everything your app needs.

Bundling isn’t limited to JavaScript, it can also package CSS, images, and other assets, making it easier to manage and deliver everything efficiently. The simple goal of bundling is to let us write modules that work in the browser
##### Key Benefits of Bundling

- **Reduced HTTP requests:** Whenever you serve a file in your browser, it requires a separate HTTP request, and too many requests can slow things down. Bundling merges multiple files into one, cutting down on the number of requests and speeding up your app’s load time.

- **File Size Reduction via Minification:** Bundlers don’t just combine files—they also work with tools like **minifiers** that strip out unnecessary parts of your code (whitespace, comments, etc.), making the final files smaller and faster to download.

- **Automatic Dependency Resolution:** Web applications often depend numerous third party libraries and packages which can become difficult to handle as the application grows. Bundlers like **Webpack** automatically manage the dependencies between these libraries, ensuring that they are included only once and in the correct order.
 -->
